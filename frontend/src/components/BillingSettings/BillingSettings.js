import React, { useState, useEffect } from 'react';
import { billingService } from '../../services/api';
import { safeParseFloat, safeToFixed } from '../../utils/numbers';
import './BillingSettings.css';

const BillingSettings = () => {
  const [settings, setSettings] = useState({
    cpu_price_per_hour: 0.0025,
    ram_price_per_hour: 0.0010,
    storage_price_per_hour: 0.0005,
    gpu_price_per_hour: 0.0100
  });
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(null);

  useEffect(() => {
    fetchSettings();
  }, []);

  const fetchSettings = async () => {
    try {
      const response = await billingService.getSettings();
      setSettings(response.data);
      setLastUpdated(response.data.updated_at);
    } catch (error) {
      console.error('Error fetching billing settings:', error);
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    } finally {
      setLoading(false);
    }
  };

  const handleSave = async () => {
    setSaving(true);
    try {
      const response = await billingService.updateSettings(settings);
      setLastUpdated(response.data.updated_at);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const successMessage = document.createElement('div');
      successMessage.className = 'save-success-message';
      successMessage.innerHTML = '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!';
      document.body.appendChild(successMessage);
      
      setTimeout(() => {
        document.body.removeChild(successMessage);
      }, 3000);
      
    } catch (error) {
      console.error('Error saving settings:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = document.createElement('div');
      errorMessage.className = 'save-error-message';
      errorMessage.innerHTML = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫';
      document.body.appendChild(errorMessage);
      
      setTimeout(() => {
        document.body.removeChild(errorMessage);
      }, 3000);
    } finally {
      setSaving(false);
    }
  };

  const handleChange = (field, value) => {
    const numericValue = safeParseFloat(value);
    setSettings(prev => ({
      ...prev,
      [field]: numericValue
    }));
  };

  const handleReset = () => {
    if (window.confirm('–í–µ—Ä–Ω—É—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?')) {
      setSettings({
        cpu_price_per_hour: 0.0025,
        ram_price_per_hour: 0.0010,
        storage_price_per_hour: 0.0005,
        gpu_price_per_hour: 0.0100
      });
    }
  };

  if (loading) {
    return (
      <div className="loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤...</p>
      </div>
    );
  }

  return (
    <div className="billing-settings">
      <div className="settings-header">
        <h3>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞—Ä–∏—Ñ–æ–≤</h3>
        {lastUpdated && (
          <div className="last-updated">
            –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(lastUpdated).toLocaleString()}
          </div>
        )}
      </div>
      
      <p className="settings-description">
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–µ–Ω—ã –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–≤ USD –∑–∞ —á–∞—Å)
      </p>

      <div className="price-grid">
        <div className="price-item">
          <label>üíª –¶–µ–Ω–∞ –∑–∞ —è–¥—Ä–æ CPU/—á–∞—Å:</label>
          <div className="input-group">
            <span className="currency">$</span>
            <input
              type="number"
              step="0.000001"
              min="0"
              value={settings.cpu_price_per_hour}
              onChange={(e) => handleChange('cpu_price_per_hour', e.target.value)}
            />
          </div>
          <div className="price-example">
            –°–µ—Ä–≤–µ—Ä —Å 8 —è–¥—Ä–∞–º–∏: <strong>${(safeParseFloat(settings.cpu_price_per_hour) * 8 * 24).toFixed(2)}/–¥–µ–Ω—å</strong>
          </div>
        </div>

        <div className="price-item">
          <label>üß† –¶–µ–Ω–∞ –∑–∞ GB RAM/—á–∞—Å:</label>
          <div className="input-group">
            <span className="currency">$</span>
            <input
              type="number"
              step="0.000001"
              min="0"
              value={settings.ram_price_per_hour}
              onChange={(e) => handleChange('ram_price_per_hour', e.target.value)}
            />
          </div>
          <div className="price-example">
            –°–µ—Ä–≤–µ—Ä —Å 32GB RAM: <strong>${(safeParseFloat(settings.ram_price_per_hour) * 32 * 24).toFixed(2)}/–¥–µ–Ω—å</strong>
          </div>
        </div>

        <div className="price-item">
          <label>üíæ –¶–µ–Ω–∞ –∑–∞ GB Storage/—á–∞—Å:</label>
          <div className="input-group">
            <span className="currency">$</span>
            <input
              type="number"
              step="0.000001"
              min="0"
              value={settings.storage_price_per_hour}
              onChange={(e) => handleChange('storage_price_per_hour', e.target.value)}
            />
          </div>
          <div className="price-example">
            –°–µ—Ä–≤–µ—Ä —Å 500GB: <strong>${(safeParseFloat(settings.storage_price_per_hour) * 500 * 24).toFixed(2)}/–¥–µ–Ω—å</strong>
          </div>
        </div>

        <div className="price-item">
          <label>üéÆ –¶–µ–Ω–∞ –∑–∞ GPU/—á–∞—Å:</label>
          <div className="input-group">
            <span className="currency">$</span>
            <input
              type="number"
              step="0.000001"
              min="0"
              value={settings.gpu_price_per_hour}
              onChange={(e) => handleChange('gpu_price_per_hour', e.target.value)}
            />
          </div>
          <div className="price-example">
            –°–µ—Ä–≤–µ—Ä —Å GPU: <strong>${(safeParseFloat(settings.gpu_price_per_hour) * 24).toFixed(2)}/–¥–µ–Ω—å</strong>
          </div>
        </div>
      </div>

      <div className="settings-actions">
        <button 
          onClick={handleReset}
          className="btn btn-secondary"
        >
          üîÑ –°–±—Ä–æ—Å–∏—Ç—å
        </button>
        <button 
          onClick={handleSave} 
          disabled={saving}
          className="btn btn-primary"
        >
          {saving ? '‚è≥ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}
        </button>
      </div>

      <div className="settings-info">
        <h4>üìä –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞</h4>
        <div className="calculation-example">
          <p>–ü—Ä–∏–º–µ—Ä: –°–µ—Ä–≤–µ—Ä —Å 4 —è–¥—Ä–∞–º–∏, 16GB RAM, 250GB Storage</p>
          <p>
            <strong>–°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –¥–µ–Ω—å:</strong> $
            {safeToFixed(
              safeParseFloat(settings.cpu_price_per_hour) * 4 * 24 +
              safeParseFloat(settings.ram_price_per_hour) * 16 * 24 +
              safeParseFloat(settings.storage_price_per_hour) * 250 * 24
            )}
          </p>
        </div>
      </div>
    </div>
  );
};

export default BillingSettings;