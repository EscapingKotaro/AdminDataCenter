import React, { useState, useEffect } from 'react';
import { serverService } from '../../services/api';
import './ServerBackups.css';

const ServerBackups = () => {
  const [servers, setServers] = useState([]);
  const [selectedServer, setSelectedServer] = useState(null);
  const [backups, setBackups] = useState([]);
  const [loading, setLoading] = useState(true);
  const [creatingBackup, setCreatingBackup] = useState(false);

  useEffect(() => {
    fetchServers();
  }, []);

  useEffect(() => {
    if (selectedServer) {
      fetchBackups(selectedServer);
    }
  }, [selectedServer]);

  const fetchServers = async () => {
    try {
      const response = await serverService.getAll();
      setServers(response.data);
      if (response.data.length > 0) {
        setSelectedServer(response.data[0].id);
      }
    } catch (error) {
      console.error('Error fetching servers:', error);
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      setServers([
        { id: 1, name: 'Web Server 01', ip_address: '192.168.1.101' },
        { id: 2, name: 'Database Server', ip_address: '192.168.1.102' }
      ]);
      setSelectedServer(1);
    } finally {
      setLoading(false);
    }
  };

  const fetchBackups = async (serverId) => {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—ç–∫–∞–ø–æ–≤
    const demoBackups = [
      {
        id: 1,
        name: `backup-${serverId}-${new Date().toISOString().split('T')[0]}.tar.gz`,
        size: '2.4 GB',
        created_at: new Date(Date.now() - 86400000).toISOString(), // 1 –¥–µ–Ω—å –Ω–∞–∑–∞–¥
        status: 'completed'
      },
      {
        id: 2,
        name: `backup-${serverId}-${new Date(Date.now() - 172800000).toISOString().split('T')[0]}.tar.gz`,
        size: '2.1 GB',
        created_at: new Date(Date.now() - 172800000).toISOString(), // 2 –¥–Ω—è –Ω–∞–∑–∞–¥
        status: 'completed'
      }
    ];
    setBackups(demoBackups);
  };

  const handleCreateBackup = async () => {
    setCreatingBackup(true);
    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const newBackup = {
        id: Date.now(),
        name: `backup-${selectedServer}-${new Date().toISOString().split('T')[0]}.tar.gz`,
        size: `${(Math.random() * 3 + 1).toFixed(1)} GB`,
        created_at: new Date().toISOString(),
        status: 'completed'
      };
      
      setBackups(prev => [newBackup, ...prev]);
      alert('‚úÖ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    } catch (error) {
      console.error('Error creating backup:', error);
      alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞');
    } finally {
      setCreatingBackup(false);
    }
  };

  const handleDownloadBackup = (backup) => {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    alert(`üì• –ù–∞—á–∞—Ç–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞: ${backup.name}\n\n–í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã –Ω–∞—á–∞–ª–∞—Å—å –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞.`);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    const link = document.createElement('a');
    link.href = 'data:text/plain;charset=utf-8,This is a demo backup file content';
    link.download = backup.name;
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (loading) return <div className="loading">–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤...</div>;

  return (
    <div className="server-backups">
      <h3>üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—ç–∫–∞–ø–∞–º–∏</h3>

      <div className="backup-controls">
        <div className="server-selector">
          <label>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä:</label>
          <select 
            value={selectedServer || ''} 
            onChange={(e) => setSelectedServer(parseInt(e.target.value))}
          >
            {servers.map(server => (
              <option key={server.id} value={server.id}>
                {server.name} ({server.ip_address})
              </option>
            ))}
          </select>
        </div>

        <button 
          onClick={handleCreateBackup} 
          disabled={creatingBackup}
          className="btn btn-primary"
        >
          {creatingBackup ? 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ...' : '‚ûï –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø'}
        </button>
      </div>

      {selectedServer && (
        <div className="backups-list">
          <h4>üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã</h4>
          
          {backups.length === 0 ? (
            <div className="no-backups">
              <p>ü§∑‚Äç‚ôÇÔ∏è –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
              <p>–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±—ç–∫–∞–ø –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞</p>
            </div>
          ) : (
            <div className="backups-grid">
              {backups.map(backup => (
                <div key={backup.id} className="backup-item">
                  <div className="backup-info">
                    <h5>{backup.name}</h5>
                    <p>–†–∞–∑–º–µ—Ä: {backup.size}</p>
                    <p>–°–æ–∑–¥–∞–Ω: {new Date(backup.created_at).toLocaleDateString()}</p>
                    <span className={`status status-${backup.status}`}>
                      {backup.status === 'completed' ? '‚úÖ –ì–æ—Ç–æ–≤' : 'üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                    </span>
                  </div>
                  <div className="backup-actions">
                    <button 
                      onClick={() => handleDownloadBackup(backup)}
                      className="btn btn-download"
                    >
                      üì• –°–∫–∞—á–∞—Ç—å
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      <div className="backup-info-box">
        <h4>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—ç–∫–∞–ø–∞—Ö</h4>
        <ul>
          <li>–ë—ç–∫–∞–ø—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
          <li>–•—Ä–∞–Ω—è—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π</li>
          <li>–ú–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .tar.gz</li>
          <li>–í–∫–ª—é—á–∞—é—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</li>
        </ul>
      </div>
    </div>
  );
};

export default ServerBackups;