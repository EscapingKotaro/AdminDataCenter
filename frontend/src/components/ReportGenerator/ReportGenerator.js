import React, { useState } from 'react';
import './ReportGenerator.css';

const ReportGenerator = () => {
  const [reportType, setReportType] = useState('daily');
  const [dateRange, setDateRange] = useState({
    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    end: new Date().toISOString().split('T')[0]
  });
  const [format, setFormat] = useState('pdf');
  const [isGenerating, setIsGenerating] = useState(false);

  const reportTypes = [
    { value: 'daily', label: 'üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å' },
    { value: 'weekly', label: 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', description: '–°–≤–æ–¥–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é' },
    { value: 'monthly', label: 'üìà –ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç', description: '–ê–Ω–∞–ª–∏–∑ –∑–∞ –º–µ—Å—è—Ü' },
    { value: 'performance', label: '‚ö° –û—Ç—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', description: '–ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤' },
    { value: 'billing', label: 'üí∏ –ë–∏–ª–ª–∏–Ω–≥ –æ—Ç—á–µ—Ç', description: '–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
    { value: 'errors', label: 'üö® –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö', description: '–ê–Ω–∞–ª–∏–∑ —Å–±–æ–µ–≤ –∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤' }
  ];

  const handleGenerateReport = () => {
    setIsGenerating(true);
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞
    setTimeout(() => {
      setIsGenerating(false);
      
      // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = new Blob(['–≠—Ç–æ –¥–µ–º–æ-–æ—Ç—á–µ—Ç. –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.'], 
        { type: format === 'pdf' ? 'application/pdf' : 'text/csv' });
      const url = URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;
      link.download = `report-${reportType}-${new Date().toISOString().split('T')[0]}.${format}`;
      link.click();
      URL.revokeObjectURL(url);
    }, 2000);
  };

  return (
    <div className="report-generator">
      <h3>üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤</h3>
      
      <div className="report-form">
        <div className="form-section">
          <label>–¢–∏–ø –æ—Ç—á–µ—Ç–∞:</label>
          <div className="report-types">
            {reportTypes.map(type => (
              <div
                key={type.value}
                className={`report-type-card ${reportType === type.value ? 'selected' : ''}`}
                onClick={() => setReportType(type.value)}
              >
                <div className="type-icon">{type.label.split(' ')[0]}</div>
                <div className="type-info">
                  <div className="type-title">{type.label.split(' ').slice(1).join(' ')}</div>
                  <div className="type-description">{type.description}</div>
                </div>
              </div>
            ))}
          </div>
        </div>

        <div className="form-section">
          <label>–ü–µ—Ä–∏–æ–¥:</label>
          <div className="date-range">
            <input
              type="date"
              value={dateRange.start}
              onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
              className="date-input"
            />
            <span>–ø–æ</span>
            <input
              type="date"
              value={dateRange.end}
              onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
              className="date-input"
            />
          </div>
        </div>

        <div className="form-section">
          <label>–§–æ—Ä–º–∞—Ç:</label>
          <div className="format-selector">
            <label className="format-option">
              <input
                type="radio"
                value="pdf"
                checked={format === 'pdf'}
                onChange={() => setFormat('pdf')}
              />
              <span>üìÑ PDF</span>
            </label>
            <label className="format-option">
              <input
                type="radio"
                value="csv"
                checked={format === 'csv'}
                onChange={() => setFormat('csv')}
              />
              <span>üìä CSV</span>
            </label>
            <label className="format-option">
              <input
                type="radio"
                value="excel"
                checked={format === 'excel'}
                onChange={() => setFormat('excel')}
              />
              <span>üìù Excel</span>
            </label>
          </div>
        </div>

        <button 
          onClick={handleGenerateReport}
          disabled={isGenerating}
          className="generate-btn"
        >
          {isGenerating ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : 'üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç'}
        </button>
      </div>

      <div className="report-preview">
        <h4>üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä</h4>
        <div className="preview-content">
          <p>–û—Ç—á–µ—Ç: {reportTypes.find(t => t.value === reportType)?.label}</p>
          <p>–ü–µ—Ä–∏–æ–¥: {dateRange.start} - {dateRange.end}</p>
          <p>–§–æ—Ä–º–∞—Ç: {format.toUpperCase()}</p>
          <p className="preview-note">
            –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–ª—Å—è –±—ã –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞
          </p>
        </div>
      </div>
    </div>
  );
};

export default ReportGenerator;