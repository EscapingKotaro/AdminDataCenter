import React, { useState, useEffect } from 'react';
import ServerMetrics from '../components/ServerMetrics/ServerMetrics';
import VisitorStats from '../components/VisitorStats/VisitorStats';
import NetworkMonitor from '../components/NetworkMonitor/NetworkMonitor';
import SystemHealth from '../components/SystemHealth/SystemHealth';
import { serverService, demoService } from '../services/api';
import './Monitoring.css';

const Monitoring = () => {
  const [selectedServer, setSelectedServer] = useState(null);
  const [timeRange, setTimeRange] = useState('1h');
  const [servers, setServers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchServers();
  }, []);

  const fetchServers = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã –∏–∑ API –∏–ª–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö
      const response = await serverService.getAll();
      setServers(response.data);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (response.data.length > 0) {
        setSelectedServer(response.data[0].id);
      }
      
    } catch (err) {
      console.error('Error fetching servers for monitoring:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        const demoResponse = await demoService.getServers();
        setServers(demoResponse.data);
        if (demoResponse.data.length > 0) {
          setSelectedServer(demoResponse.data[0].id);
        }
      } catch (demoError) {
        console.error('Failed to load demo data:', demoError);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleServerChange = (serverId) => {
    const serverIdNum = parseInt(serverId);
    setSelectedServer(serverIdNum);
  };

  if (loading) {
    return (
      <div className="monitoring-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...</p>
      </div>
    );
  }

  if (error && servers.length === 0) {
    return (
      <div className="monitoring-error">
        <div className="error-icon">‚ùå</div>
        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
        <p>{error}</p>
        <button onClick={fetchServers} className="btn btn-primary">
          –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
        </button>
      </div>
    );
  }

  return (
    <div className="monitoring-page">
      <div className="monitoring-header">
        <h1>üëÅÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h1>
        <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö</p>
        
        <div className="monitoring-controls">
          <div className="server-selector">
            <label>–°–µ—Ä–≤–µ—Ä:</label>
            <select 
              value={selectedServer || ''} 
              onChange={(e) => handleServerChange(e.target.value)}
              disabled={servers.length === 0}
            >
              <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä</option>
              {servers.map(server => (
                <option key={server.id} value={server.id}>
                  {server.name} ({server.ip_address}) - {server.status}
                </option>
              ))}
            </select>
          </div>
          
          <div className="time-selector">
            <label>–ü–µ—Ä–∏–æ–¥:</label>
            <select 
              value={timeRange} 
              onChange={(e) => setTimeRange(e.target.value)}
            >
              <option value="1h">1 —á–∞—Å</option>
              <option value="6h">6 —á–∞—Å–æ–≤</option>
              <option value="24h">24 —á–∞—Å–∞</option>
              <option value="7d">7 –¥–Ω–µ–π</option>
            </select>
          </div>

          <button onClick={fetchServers} className="btn btn-secondary refresh-btn">
            üîÑ –û–±–Ω–æ–≤–∏—Ç—å
          </button>
        </div>
      </div>

      {error && (
        <div className="monitoring-warning">
          <span>‚ö†Ô∏è {error} –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.</span>
        </div>
      )}

      {servers.length === 0 ? (
        <div className="no-servers">
          <div className="empty-icon">üè¢</div>
          <h3>–ù–µ—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h3>
          <p>–î–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API</p>
        </div>
      ) : !selectedServer ? (
        <div className="no-selection">
          <div className="info-icon">‚ÑπÔ∏è</div>
          <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</h3>
          <p>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–∑ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏</p>
        </div>
      ) : (
        <div className="monitoring-grid">
          <div className="metrics-section">
            <ServerMetrics serverId={selectedServer} timeRange={timeRange} />
          </div>
          
          <div className="visitors-section">
            <VisitorStats serverId={selectedServer} timeRange={timeRange} />
          </div>
          
          <div className="network-section">
            <NetworkMonitor serverId={selectedServer} timeRange={timeRange} />
          </div>
          
          <div className="health-section">
            <SystemHealth serverId={selectedServer} />
          </div>
        </div>
      )}
    </div>
  );
};

export default Monitoring;